/*!
 * WheelPicker v1.1.0
 * https://cople.github.io/WheelPicker
 * Licensed under the MIT License
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["WheelPicker"] = factory();
	else
		root["WheelPicker"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	__webpack_require__(1);

	var utils = __webpack_require__(3);
	var Wheel = __webpack_require__(4);

	function WheelPicker(options) {
	    this.options = utils.extend({
	        data: [],
	        rows: 5,
	        rowHeight: 34,
	        hiddenInput: false,
	        parseValue: function(value) {
	            return value.split(" ");
	        },
	        formatValue: function(value) {
	            return value.join(" ");
	        },
	        formatHiddenValue: function(value) {
	            return value.join(" ");
	        }
	    }, options);

	    if (this.options.el) {
	        var el = typeof this.options.el === "string" ? document.querySelector(this.options.el) : this.options.el;
	        el.readOnly = true;

	        if (this.options.hiddenInput) {
	            var dummyInput = el.cloneNode();
	            dummyInput.classList.add("wheelpicker-control");
	            dummyInput.removeAttribute("id");
	            dummyInput.removeAttribute("name");
	            this.control = dummyInput;
	            this.elType = el.type;
	            el.type = "hidden";
	            el.classList.add("wheelpicker-hiddeninput");
	            el.parentNode.insertBefore(this.control, el);
	            this.hiddenInput = el;
	        } else {
	            el.classList.add("wheelpicker-control");
	            this.control = el;
	        }

	        this.origEl = el;
	    }

	    this.value = [];
	    this.wheels = [];

	    this.closed = true;
	    this.disabled = false;

	    this.transformName = utils.prefixed("transform");
	    this.transitionName = utils.prefixed("transition");
	    this.transitionendName = {
	        WebkitTransition: "webkitTransitionEnd",
	        MozTransition: "transitionEnd",
	        msTransition: "MSTransitionEnd",
	        OTransition: "oTransitionEnd",
	        transition: "transitionend"
	    }[this.transitionName];

	    this._init();
	}

	WheelPicker.prototype = {
	    _init: function() {
	        var defaultValue = this.options.value || (this.control && this.control.value ? this.options.parseValue(this.control.value) : null);

	        this._createDOM();

	        for (var i = 0, len = this.options.data.length; i < len; i++) {
	            this.wheels.push(new Wheel(this.wheelsContainer, {
	                rows: this.options.rows,
	                rowHeight: this.options.rowHeight,
	                data: this.options.data[i],
	                value: defaultValue ? defaultValue[i] : null,
	                onSelect: this._onChange.bind(this, i)
	            }));
	        }

	        if (this.options.title) this.container.querySelector(".wheelpicker-title").innerHTML = this.options.title;
	        if (this.options.titles) this.container.querySelector(".wheelpicker-panel-titles").innerHTML = '<span>' + this.options.titles.join('</span><span>') + '</span>';
	        this.container.querySelector(".wheelpicker-mask-top").style.height = this.container.querySelector(".wheelpicker-mask-btm").style.height = this.options.rowHeight * Math.floor(this.options.rows / 2) - 1 + "px";

	        this._bindEvents();
	        if (defaultValue) this._set(true);
	    },

	    _createDOM: function () {
	        this.container = document.createElement("div");
	        this.container.className = "wheelpicker";
	        if (this.origEl) this.container.id = "wheelpicker-" + (this.origEl.name || this.origEl.id);
	        this.container.innerHTML = `<div class='wheelpicker-backdrop'></div>
	        <div class='wheelpicker-panel'>
	            <div class='wheelpicker-panel-titles'>
	                
	            </div>
	            <div class='wheelpicker-main'>
	                <div class='wheelpicker-wheels'></div>
	                <div class='wheelpicker-mask wheelpicker-mask-top'></div>
	                <div class='wheelpicker-mask wheelpicker-mask-current'></div>
	                <div class='wheelpicker-mask wheelpicker-mask-btm'></div>
	            </div>
	            <div class='wheelpicker-actions'>
	                <button type='button' class='btn-cancel'>取消</button>
	                <button type='button' class='btn-set'>确定</button>
	                <h4 class='wheelpicker-title'></h4>
	            </div>
	        </div>`;
	        this.wheelsContainer = this.container.querySelector(".wheelpicker-wheels");

			if (this.options.onRender) this.options.onRender.call(this, this.container);
	        if(this.options.renderBox){
				this.options.renderBox.appendChild(this.container);
			}else{
				document.body.appendChild(this.container);
			}
	    },

	    _bindEvents: function() {
	        this._onFocus = function(event) {
	            event.target.blur();
	            this.show();
	        }.bind(this);

	        if (this.control) this.control.addEventListener("focus", this._onFocus);
	        if (this.options.hideOnBackdrop) this.container.querySelector(".wheelpicker-backdrop").addEventListener("click", this._cancel.bind(this));

	        this.container.querySelector(".wheelpicker-actions .btn-cancel").addEventListener("click", this._cancel.bind(this));
	        this.container.querySelector(".wheelpicker-actions .btn-set").addEventListener("click", this._set.bind(this));

	        this.container.querySelector(".wheelpicker-backdrop").addEventListener(this.transitionendName, this._backdropTransEnd.bind(this));
	    },

	    _onChange: function(index) {
	        if (this.options.onChange) this.options.onChange.call(this, index, this.getSelectedItems()[index]);
	    },

	    _backdropTransEnd: function() {
	        if (!this.container.classList.contains("shown")) {
	            this.container.style.display = "none";
	            this.closed = true;

	            if (this.restore) {
	                this.wheels.forEach(function(wheel, idx) {
	                    wheel.setData(this._tempData[idx]);
	                }, this);
	            }
	            this.setValue(this.value);
	        }
	    },

	    _set: function(silent) {
	        var selectedItems = this.getSelectedItems();
	        this.value = this.getValue();
	        if (this.control && !this.cancelled) {
	            this.control.value = this.options.formatValue(selectedItems.map(function(item) {
	                return item ? item.text : null;
	            }));
	            if (this.hiddenInput) {
	                this.hiddenInput.value = this.options.formatHiddenValue(selectedItems.map(function(item) {
	                    return item ? item.value : null;
	                }));
	            }
	        }
	        this.cancelled = false;
	        if (silent === true) return;
	        if (this.options.onSelect) this.options.onSelect.call(this, selectedItems);
	        this.container.classList.remove("shown");
	    },

	    _cancel: function() {
	        this.cancelled = true;
	        if (this.changed) {
	            this.restore = true;
	        }
	        if (this.options.onCancel) this.options.onCancel.call(this);
	        this.container.classList.remove("shown");
	    },

	    show: function() {
	        if (this.disabled || !this.closed) return;

	        var container = this.container;

	        this.closed = this.changed = this.restore = false;
	        this._tempData = this.getData();

	        container.style.display = "block";
	        setTimeout(function() {
	            container.classList.add("shown");
	        }, 10);

	        if (this.options.onShow) this.options.onShow.call(this);
	    },

	    hide: function() {
	        if (this.disabled || this.closed) return;

	        this._cancel();
	    },

	    getSelectedItems: function() {
	        return this.wheels.map(function(wheel) {
	            return wheel.getSelectedItem();
	        });
	    },

	    getValue: function(index) {
	        if (typeof index === "number") {
	            return this.wheels[index].getValue();
	        } else {
	            return this.wheels.map(function(wheel) {
	                return wheel.getValue();
	            });
	        }
	    },

	    setValue: function(value, index) {
	        if (this.disabled) return;

	        var noAnimation = this.closed;

	        if (typeof index === "number") {
	            this.wheels[index].setValue(value, noAnimation);
	        } else {
	            this.wheels.forEach(function(wheel, idx) {
	                wheel.setValue(value[idx], noAnimation);
	            });
	        }

	        if (this.closed) this._set(true);
	    },

	    getData: function(index) {
	        if (typeof index === "number") {
	            return this.wheels[index].getData();
	        } else {
	            return this.wheels.map(function(wheel) {
	                return wheel.getData();
	            });
	        }
	    },

	    setData: function(data, index, value) {
	        if (this.disabled) return;
	        this.changed = true;

	        if (typeof index === "number") {
	            this.wheels[index].setData(data, value);
	        } else {
	            if (utils.isArray(index)) value = index;

	            this.wheels.forEach(function(wheel, idx) {
	                wheel.setData(data[idx], value ? value[idx] : null);
	            });
	        }

	        if (this.closed) this._set(true);
	    },

	    enable: function() {
	        this.disabled = false;
	    },

	    disable: function() {
	        this.disabled = true;
	    },

	    destory: function() {
	        this.disable();
	        this.container.parentNode.removeChild(this.container);

	        if (this.hiddenInput) {
	            this.control.parentNode.removeChild(this.control);
	            this.hiddenInput.readOnly = false;
	            this.hiddenInput.type = this.elType;
	            this.hiddenInput.classList.remove("wheelpicker-hiddeninput");
	        } else if (this.control) {
	            this.control.readOnly = false;
	            this.control.removeEventListener("focus", this._onFocus);
	            this.control.classList.remove("wheelpicker-control");
	        }
	    }
	};

	module.exports = WheelPicker;


/***/ }),
/* 1 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 2 */,
/* 3 */
/***/ (function(module, exports) {

	"use strict";

	module.exports = {
	    extend: Object.assign || function(target, source) {
	        for (var key in source) {
	            if (source.hasOwnProperty(key)) target[key] = source[key];
	        }
	        return target;
	    },
	    prefixed: function(prop) {
	        var style = document.createElement("div").style;
	        var vendors = ["Webkit", "Moz", "ms", "O"];
	        var name;

	        if (prop in style) return prop;

	        for (var i = 0, len = vendors.length; i < len; i++) {
	            name = vendors[i] + prop.charAt(0).toUpperCase() + prop.substring(1);
	            if (name in style) return name;
	        }

	        return null;
	    },
	    getStyle: function(el, prop) {
	        prop = prop.replace(/([A-Z])/g, "-$1");
	        prop = prop.toLowerCase();
	        return window.getComputedStyle(el, null).getPropertyValue(prop);
	    },
	    isArray: Array.isArray || function(obj) {
	        return Object.prototype.toString.call(obj) === "[object Array]";
	    }
	};


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var utils = __webpack_require__(3);

	function Wheel(el, options) {
	    this.container = typeof el === "string" ? document.querySelector(el) : el;

	    this.data = [];
	    this.items = [];

	    this.y = 0;
	    this.selectedIndex = 0;

	    this.isTransition = false;
	    this.isTouching = false;

	    this.easings = {
	        scroll: "cubic-bezier(0.23, 1, 0.32, 1)", // easeOutQuint
	        scrollBounce: "cubic-bezier(0.25, 0.46, 0.45, 0.94)", // easeOutQuard
	        bounce: "cubic-bezier(0.165, 0.84, 0.44, 1)" // easeOutQuart
	    };

	    this.options = utils.extend({
	        data: [],
	        rows: 5,
	        rowHeight: 34,
	        adjustTime: 400,
	        bounceTime: 600,
	        momentumThresholdTime: 300,
	        momentumThresholdDistance: 10
	    }, options);

	    if (this.options.rows % 2 === 0) this.options.rows++;

	    this.pointerEvents = "ontouchstart" in window ? {
	        start: "touchstart",
	        move: "touchmove",
	        end: "touchend",
	        cancel: "touchcancel"
	    } : {
	        start: "mousedown",
	        move: "mousemove",
	        end: "mouseup",
	        cancel: "mouseleave"
	    };

	    this.transformName = utils.prefixed("transform");
	    this.transitionName = utils.prefixed("transition");
	    this.transitionendName = {
	        WebkitTransition: "webkitTransitionEnd",
	        MozTransition: "transitionEnd",
	        msTransition: "MSTransitionEnd",
	        OTransition: "oTransitionEnd",
	        transition: "transitionend"
	    }[this.transitionName];

	    this._init();
	}

	Wheel.prototype = {
	    _init: function() {
	        this._createDOM();
	        this._bindEvents();
	    },

	    _createDOM: function() {
	        this.wheel = document.createElement("div");
	        this.wheel.className = "wheelpicker-wheel";

	        this.scroller = document.createElement("ul");
	        this.scroller.className = "wheelpicker-wheel-scroller";

	        this.setData(this.options.data, this.options.value);

	        this.wheel.style.height = this.options.rowHeight * this.options.rows + "px";
	        this.scroller.style.marginTop = this.options.rowHeight * Math.floor(this.options.rows / 2) + "px";

	        this.wheelHeight = this.wheel.offsetHeight;

	        this.wheel.appendChild(this.scroller);
	        this.container.appendChild(this.wheel);
	    },

	    _momentum: function(current, start, time, lowerMargin, wheelSize, deceleration, rowHeight) {
	        var distance = current - start;
	        var speed = Math.abs(distance) / time;
	        var destination;
	        var duration;

	        deceleration = deceleration === undefined ? 0.0006 : deceleration;

	        destination = current + (speed * speed) / (2 * deceleration) * (distance < 0 ? -1 : 1);
	        duration = speed / deceleration;

	        destination = Math.round(destination / rowHeight) * rowHeight;

	        if (destination < lowerMargin) {
	            destination = wheelSize ? lowerMargin - (wheelSize / 2.5 * (speed / 8)) : lowerMargin;
	            distance = Math.abs(destination - current);
	            duration = distance / speed;
	        } else if (destination > 0) {
	            destination = wheelSize ? wheelSize / 2.5 * (speed / 8) : 0;
	            distance = Math.abs(current) + destination;
	            duration = distance / speed;
	        }

	        return {
	            destination: Math.round(destination),
	            duration: duration
	        };
	    },

	    _resetPosition: function(duration) {
	        var y = this.y;

	        duration = duration || 0;

	        if (y > 0) y = 0;
	        if (y < this.maxScrollY) y = this.maxScrollY;

	        if (y === this.y) return false;

	        this._scrollTo(y, duration, this.easings.bounce);

	        return true;
	    },

	    _getClosestSelectablePosition: function(y) {
	        var index = Math.abs(Math.round(y / this.options.rowHeight));

	        if (!this.data[index].disabled) return y;

	        var max = Math.max(index, this.data.length - index);
	        for (var i = 1; i <= max; i++) {
	            if (!this.data[index + i].disabled) {
	                index += i;
	                break;
	            }
	            if (!this.data[index - i].disabled) {
	                index -= i;
	                break;
	            }
	        }
	        return index * -this.options.rowHeight;
	    },

	    _scrollTo: function(y, duration, easing) {
	        if (this.y === y) {
	            this._scrollFinish();
	            return false;
	        }

	        this.y = this._getClosestSelectablePosition(y);
	        this.scroller.style[this.transformName] = "translate3d(0," + this.y + "px,0)";

	        if (duration && duration > 0) {
	            this.isTransition = true;
	            this.scroller.style[this.transitionName] = duration + "ms " + easing;
	        } else {
	            this._scrollFinish();
	        }
	    },

	    _scrollFinish: function() {
	        var newIndex = Math.abs(this.y / this.options.rowHeight);
	        if (this.selectedIndex != newIndex) {
	            this.items[this.selectedIndex].classList.remove("wheelpicker-item-selected");
	            this.items[newIndex].classList.add("wheelpicker-item-selected");
	            this.selectedIndex = newIndex;
	            if (this.options.onSelect) this.options.onSelect(this.data[newIndex], newIndex);
	        }
	    },

	    _getCurrentY: function() {
	        var matrixValues = utils.getStyle(this.scroller, this.transformName).match(/-?\d+(\.\d+)?/g);
	        return parseInt(matrixValues[matrixValues.length - 1]);
	    },

	    _start: function(event) {
	        event.preventDefault();

	        if (!this.data.length) return;

	        if (this.isTransition) {
	            this.isTransition = false;
	            this.y = this._getCurrentY();
	            this.scroller.style[this.transformName] = "translate3d(0," + this.y + "px,0)";
	            this.scroller.style[this.transitionName] = "";
	        }

	        this.startY = this.y;
	        this.lastY = event.touches ? event.touches[0].pageY : event.pageY;
	        this.startTime = Date.now();

	        this.isTouching = true;
	    },

	    _move: function(event) {
	        if (!this.isTouching) return false;

	        var y = event.changedTouches ? event.changedTouches[0].pageY : event.pageY;
	        var deltaY = y - this.lastY;
	        var targetY = this.y + deltaY;
	        var now = Date.now();

	        this.lastY = y;

	        if (targetY > 0 || targetY < this.maxScrollY) {
	            targetY = this.y + deltaY / 3;
	        }

	        this.y = Math.round(targetY);

	        this.scroller.style[this.transformName] = "translate3d(0," + this.y + "px,0)";

	        if (now - this.startTime > this.momentumThresholdTime) {
	            this.startTime = now;
	            this.startY = y;
	        }

	        return false;
	    },

	    _end: function(event) {
	        if (!this.isTouching) return false;

	        var deltaTime = Date.now() - this.startTime;
	        var duration = this.options.adjustTime;
	        var easing = this.easings.scroll;
	        var distanceY = Math.abs(this.y - this.startY);
	        var momentumVals;
	        var y;

	        this.isTouching = false;

	        if (deltaTime < this.options.momentumThresholdTime && distanceY <= 10 && event.target.classList.contains("wheelpicker-item")) {
	            this._scrollTo(event.target._wsIdx * -this.options.rowHeight, duration, easing);
	            return false;
	        }

	        if (this._resetPosition(this.options.bounceTime)) return;

	        if (deltaTime < this.options.momentumThresholdTime && distanceY > this.options.momentumThresholdDistance) {
	            momentumVals = this._momentum(this.y, this.startY, deltaTime, this.maxScrollY, this.wheelHeight, 0.0007, this.options.rowHeight);
	            y = momentumVals.destination;
	            duration = momentumVals.duration;
	        } else {
	            y = Math.round(this.y / this.options.rowHeight) * this.options.rowHeight;
	        }

	        if (y > 0 || y < this.maxScrollY) {
	            easing = this.easings.scrollBounce;
	        }

	        this._scrollTo(y, duration, easing);
	    },

	    _transitionEnd: function() {
	        this.isTransition = false;
	        this.scroller.style[this.transitionName] = "";

	        if (!this._resetPosition(this.options.bounceTime)) this._scrollFinish();
	    },

	    _bindEvents: function() {
	        this.wheel.addEventListener(this.pointerEvents.start, this._start.bind(this));
	        this.wheel.addEventListener(this.pointerEvents.move, this._move.bind(this));
	        this.wheel.addEventListener(this.pointerEvents.end, this._end.bind(this));
	        this.wheel.addEventListener(this.pointerEvents.cancel, this._end.bind(this));
	        this.scroller.addEventListener(this.transitionendName, this._transitionEnd.bind(this));
	    },

	    getData: function() {
	        return this.data;
	    },

	    setData: function(data, value) {
	        var defaultValue = value || (data && data.length ? (data[0].value || data[0]) : null);

	        this.items = [];
	        this.scroller.innerHTML = "";

	        this.data = data.map(function(item, idx) {
	            var li = document.createElement("li");

	            li.className = "wheelpicker-item";

	            item = typeof item === "object" ? item : {
	                text: item,
	                value: item
	            };

	            if (item.disabled) li.className += " wheelpicker-item-disabled";
	            if (item.value === defaultValue) {
	                li.className += " wheelpicker-item-selected";
	                this.selectedIndex = idx;
	            }
	            li._wsIdx = idx;
	            li.innerHTML = item.text;

	            this.items.push(li);
	            this.scroller.appendChild(li);

	            return item;
	        }, this);

	        this.y = this.selectedIndex * -this.options.rowHeight;
	        this.scroller.style[this.transformName] = "translate3d(0," + this.y + "px,0)";
	        this.maxScrollY = -this.options.rowHeight * (this.data.length - 1);
	    },

	    getSelectedItem: function() {
	        return this.data[this.selectedIndex];
	    },

	    getValue: function() {
	        var selected = this.getSelectedItem();
	        return selected ? selected.value : null;
	    },

	    setValue: function(value, noAnimation) {
	        var index;
	        var item;

	        for (var i = 0, len = this.data.length; i < len; i++) {
	            item = this.data[i];

	            if (item.value === value) {
	                if (!item.disabled) index = i;
	                break;
	            }
	        }

	        if (index >= 0) {
	            this._scrollTo(index * -this.options.rowHeight, noAnimation ? 0 : this.options.adjustTime, this.easings.scroll);
	        }

	        return index;
	    }
	};

	module.exports = Wheel;


/***/ })
/******/ ])
});
;